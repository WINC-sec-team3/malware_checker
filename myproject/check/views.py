from flask import (Blueprint, render_template,
                     redirect, url_for, request,
                     flash, abort, send_from_directory)
import werkzeug
from werkzeug.utils import secure_filename
from flask_login import login_required
import hashlib

import os
import sys

sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

from myproject import db, app
from myproject.models import Malware, History
from myproject.check.forms import SelectFileForm, MalwareRegistrationForm

check_blueprint = Blueprint('check',
                            __name__,
                            template_folder='templates/check')

ALLOWED_EXTENSIONS = {'txt', 'pdf', 'png', 'jpg', 'jpeg', 'exe'}

def allowed_file(filename):
    return '.' in filename and \
           filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS


def generate_file_hash(file):

    data = file.read()
    hash_val = hashlib.sha256(data).hexdigest()

    return hash_val

@check_blueprint.route('/check', methods=['GET', 'POST'])
def upload_file():

    flag = ''
    name = ''

    form = SelectFileForm()

    if form.validate_on_submit():
        file = form.file.data
        filename = file.filename


        if file and not allowed_file(filename):
            flash("allowed extensions: {'txt', 'pdf', 'png', 'jpg', 'jpeg', 'exe'}")

        elif file and allowed_file(filename):
            filename = secure_filename(filename)
            hash_val = generate_file_hash(file)
            malware = Malware.query.filter_by(malware_hash=hash_val).first()

            if malware is not None:
                flag = 'True'
                name = malware.malware_name
            else:
                flag = 'False'

            result = History(is_malware=flag, hash_val=hash_val)


            # 履歴テーブルのレコード数を50に制限

            record_num = History.query.count()
            oldest = History.query.order_by(History.id).all()[0]
            index = oldest.id

            if record_num > 49 :
                History.query.filter_by(id=index).delete()

            db.session.add(result)
            db.session.commit()


        else:
            pass

    return render_template('select_file.html', form=form, flag=flag, name=name)


@check_blueprint.app_errorhandler(413)
def handle_413(error):
    return redirect(url_for('check.upload_file'))

@check_blueprint.route('/addmalware', methods=['GET', 'POST'])
@login_required
def malware_register():
    form = MalwareRegistrationForm()

    if form.validate_on_submit():
        file = form.malware_file.data
        filename = file.filename

        if filename == '':
            flash('No selected file')

        if file and not allowed_file(filename):
            flash("allowed extensions: {'txt', 'pdf', 'png', 'jpg', 'jpeg', 'exe'}")

        elif file and allowed_file(filename):

            hash_val = generate_file_hash(file)

            malware = Malware(malware_name=form.malware_name.data,
                              malware_hash=hash_val)

            db.session.add(malware)
            db.session.commit()
            flash('Successfully registerd.')
            return redirect(url_for('index'))

        else:
            pass

    return render_template('register_malware.html', form=form)

# The way not using WTForms is below.

# def generate_file_hash(filepath):

#     with open(filepath) as file:
#         binary = file.read()

#     hash_val = hashlib.sha256(binary.encode('utf-8')).hexdigest()

#     return hash_val


# @check_blueprint.route('/check', methods=['GET', 'POST'])
# def upload_file():

#     flag = ''
#     name = ''

#     if request.method == 'POST':
#         # check if the post request has the file part
#         if 'file' not in request.files:
#             flash('No file part')
#         file = request.files['file']
#         # if user does not select file, browser also
#         # submit an empty part without filename
#         filename = file.filename

#         if filename == '':
#             flash('No selected file')
#         if file and allowed_file(filename):
#             filename = secure_filename(filename)
#             filepath = os.path.join(app.config['UPLOAD_FOLDER'], filename)
#             file.save(filepath)

#             hash_val = generate_file_hash(filepath)
#             malware = Malware.query.filter_by(malware_hash=hash_val).first()

#             os.remove(filepath)

#             if malware is not None:
#                 flag = 'True'
#                 name = malware.malware_name
#             else:
#                 flag = 'False'

#             # result = History(is_malware=str(flag), file_hash=hash_val)
#             result = History(is_malware=flag, hash_val=hash_val)

#             db.session.add(result)
#             db.session.commit()

#         elif allowed_file(filename) == False:
#             flash("Your file's extension is not accepted.")
#         else:
#             pass

#     return render_template('select_file.html', flag=flag, name=name)

# @check_blueprint.route('/addmalware', methods=['GET', 'POST'])
# @login_required
# def malware_register():

#     malware_name = ''
#     hash_val = ''

#     if request.method == 'POST':
#         # check if the post request has the file part
#         if 'file' not in request.files:
#             flash('No file part')
#         file = request.files['file']
#         malware_name = request.form['malware_name']
#         # if user does not select file, browser also
#         # submit an empty part without filename
#         filename = file.filename

#         if filename == '':
#             flash('No selected file')
#         if file and allowed_file(filename):
#             filename = secure_filename(filename)
#             filepath = os.path.join(app.config['UPLOAD_FOLDER'], filename)
#             file.save(filepath)

#             hash_val = generate_file_hash(filepath)

#             malware = Malware(malware_name=malware_name,
#                               malware_hash=hash_val)

#             db.session.add(malware)
#             db.session.commit()
#             flash('Successfully registerd.')
#             return redirect(url_for('index'))

#         elif allowed_file(filename) == False:
#             flash("Your file's extension is not accepted.")
#         else:
#             pass

#     return render_template('register_malware.html')

