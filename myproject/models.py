# set up database
from myproject import db, login_manager, admin # __init__.py
from werkzeug.security import generate_password_hash,check_password_hash
from flask_login import UserMixin, current_user
from flask_admin import AdminIndexView
from flask_admin.contrib.sqla import ModelView
from flask import redirect, url_for
from datetime import datetime
import hashlib, io

# By inheriting the UserMixin we get access to a lot of built-in attributes
# which we will be able to call in our views!
# is_authenticated()
# is_active()
# is_anonymous()
# get_id()

# The user_loader decorator allows flask-login to load the current user
# and grab their id.
@login_manager.user_loader
def load_user(user_id):
    return User.query.get(user_id)

# file = form.target_file.data
# or   = form.target_file.filename // Bad way !!
def generate_file_hash(file):

    file_content = hashlib.sha256(file.encode('utf-8'))
    return file_content.hexdigest()

class User(db.Model, UserMixin):

    __tablename__ = 'users'

    id = db.Column(db.Integer, primary_key = True)
    email = db.Column(db.String(64), unique=True, index=True)
    username = db.Column(db.String(64), unique=True, index=True)
    password_hash = db.Column(db.String(128))

    def __init__(self, email, username, password):
        self.email = email
        self.username = username
        self.password_hash = generate_password_hash(password)

    def check_password(self,password):
        # https://stackoverflow.com/questions/23432478/flask-generate-password-hash-not-constant-output
        return check_password_hash(self.password_hash, password)


# マルウェアのデータベース（マルウェアの名前，ハッシュ値）
class Malware(db.Model, UserMixin):

    __tablename__ = 'malware'

    id = db.Column(db.Integer, primary_key = True)
    malware_name = db.Column(db.String(64), index=True)
    malware_hash = db.Column(db.String(128))

    # ファイルを受け取ってハッシュ化してのち登録
    def __init__(self, malware_name, malware_file):
        self.malware_name = malware_name
        self.malware_hash = generate_file_hash(malware_file)


# 履歴のデータベース（時間，結果，ファイルのハッシュ値）
class History(db.Model, UserMixin):

    __tablename__ = 'history'

    # add malware_name

    id = db.Column(db.Integer, primary_key = True)
    # checked_at = db.Column(db.DateTime, nullable=False, default=datetime.now)
    is_malware = db.Column(db.String(32))
    file_hash = db.Column(db.String(128))

    # is_malware = True/False
    def __init__(self, is_malware, hash_val):
        self.is_malware = is_malware
        self.file_hash = hash_val


# Customize Admin page Base view
class MyModelView(ModelView):
    def is_accessible(self):
        return current_user.is_authenticated

    def inaccessible_callback(self, name, **kwargs):
        return redirect(url_for('auth.login'))

# add a set of admin pages here.
admin.add_view(MyModelView(User, db.session))
admin.add_view(MyModelView(Malware, db.session))
admin.add_view(MyModelView(History, db.session))