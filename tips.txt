Set the FLASK_APP environment Variable

    MACOS/Linux
        $ export FLASK_APP=app.py
    Windows
        $ set FLASK_APP=app.py

# sets up the migrations directory
$ flask db init

#sets up the migration file
$ flask db migrate -m "some message"

#updates the database with the migration
$ flask db upgrade

#run this app
$ python app.py

*************************************************************
# How should they be for the update_user_form
# def validate_email(self, email):
#         if email.data != current_user.email:
#             if User.query.filter_by(email=email.data).first():
#                 raise ValidationError('Email has been registered')
#     def validate_username(self, username):
#         if username.data != current_user.username:
#             if User.query.filter_by(username=username.data).first():
#                 raise ValidationError('Username has been registered')

**************************************************************
# If a user was trying to visit a page that requires a login
# flask saves that URL as 'next'.
next = request.args.get('next
# So let's now check if that next exists, otherwise we'll go to
# the welcome page.
if next == None or not next[0]=='/':
    next = url_for('welcome_user
return redirect(next)

**************************************************************
@auth_blueprint.route('/welcome')
@login_required
def welcome_user():
    return render_template('welcome_user.html')

**************************************************************
    {{ for error in form.email.errors %}}
        <span style='color: red;'>{{ error }}</span>
    {{ % endfor %}}
    {{ for error in form.username.errors %}}
        <span style='color: red;'>{{ error }}</span>
    {{ % endfor %}}

**************************************************************
sqlalchemy no such table　と言われたとき

Set the FLASK_APP environment Variable

    MACOS/Linux
        $ export FLASK_APP=app.py
    Windows
        $ set FLASK_APP=app.py

# sets up the migrations directory
$ flask db init

#sets up the migration file
$ flask db migrate -m "some message"

#updates the database with the migration
$ flask db upgrade

#run this app
$ python app.py

**************************************************************
現状

・main.pyで生成されるtestuserではloginできない
・AdminIndexViewのカスタマイズは__init__.pyで
・AdminIndexViewがカスタマイズできると/adminにアクセスしたときに，adminのHomeだけが
　レンダリングされるのではなく，Forbiddenになるので良い
・AdminIndexViewの登録方法（特にendpoint）の仕組みが分かっていない
・__init__.pyでは他のファイルからのimportを行わない
・models.pyで新しいデータベース（テーブル）を作成し，admin.add_view()をして，flask db migrateを行えば，
　/adminのnav-barにそのクラス名が表示されて，テーブルが作成される
・それぞれのテーブルはCRUD可能（カスタマイズも出来る＝＞introduction to flask_adminを参照）
・/adminはカスタマイズでフィルターかけてsortとかできる
・class MyModelView(ModelView)は全てのテーブルに共通するカスタマイズ（例．loginすれば見られる）
・この共通のクラスを継承してそれぞれのテーブルでのviewを作成（必要ならば，例．CRUD -> CRD）（例．class UserView(MyModelView)）
・それぞれのviewを作った場合はadmin.add_view(UserView(User, db.session))のようにして
　特にカスタマイズしない場合はadmin.add_view(MyModelView(Test, db.session))のようにする
*****************************************************************
今後

・ファイルアップロードからのハッシュ値を計算して比較して結果を表示する機能
・マルウェアの登録（virus_nameとハッシュ値を登録）＝＞できれば名前とファイルを登録したときにファイルのハッシュ値を計算して登録したい
・履歴テーブル
・最初のユーザー
・/registerのValidationError
・もろもろのエラー処理
******************************************************************
対応

・/adminをloginしていないときにアクセスしたらForbiddenが出るようにする（AdminIndexViewに対応)
・loginしていない状態でアクセスしたらloginのページへredirect
・registerをログイン内にする
・flashに対応(login, register, logout)

******************************************************************
import hashlib

path = r'C:/Users/Tommy2nd/Downloads/cmd.exe'
path = r'C:/Users/Tommy2nd/Downloads/msdt.exe'
path = r'C:/Users/Tommy2nd/Downloads/notepad.exe'

f = open(path)
target = f.read()
target = hashlib.sha256(target.encode('utf-8'))
print(target.hexdigest())

******************************************************************
Errors

・login => email/passaword　が違う
・your file is safe/ your file has malwareのタイミング
・ファイルの大きさ制限
・ファイルの拡張子制限
・flashの見た目
・説明の<p>

{% with messages = get_flashed_messages() %}
    {% if messages %}
    <ul class=flashes>
        {% for message in messages %}
            <li>{{ message }}</li>
        {% endfor %}
    </ul>
    {% endif %}
{% endwith %}

<div class="jumbotron">
    {% if current_user.is_authenticated %}
      <p>Hi {{ current_user.username }}!</p>
    {% else %}
      <p>Please login or register!</p>
    {% endif %}
</div>

.jumbotron{
    background-color: rosybrown;
}